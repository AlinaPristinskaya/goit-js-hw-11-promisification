{"version":3,"sources":["index.js"],"names":["users","name","active","toggleUserState","allUsers","userName","Promise","resolve","map","user","logger","updatedUsers","console","table","then","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","delay","reject","setTimeout","id","logSuccess","time","log","logError","warn","amount","catch"],"mappings":";;;AAmFA,aAnFA,QAAA,oBAyBC,MAAMA,EAAQ,CACb,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGjBC,EAAkB,CAACC,EAAUC,IAC1B,IAAIC,QAASC,IAIlBA,EAHqBH,EAASI,IAAIC,GAChCA,EAAKR,OAASI,EAAW,IAAKI,EAAMP,QAASO,EAAKP,QAAWO,MAS7DC,EAASC,GAAgBC,QAAQC,MAAMF,GAG/CR,EAAgBH,EAAO,SAASc,KAAKJ,GACrCP,EAAgBH,EAAO,OAAOc,KAAKJ,GAGlC,MAAMK,EAA4B,CAACC,EAAKC,IAChCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAmBC,IACfC,MAAAA,EAAQR,EAA0B,IAAK,KACxC,OAAA,IAAIT,QAAQ,CAACC,EAASiB,KACzBC,WAAW,KACUP,KAAKE,SAAW,GAE7Bb,EAAQ,CAACe,EAAYI,GAAIH,IAEzBC,EAAQF,EAAYI,KAE3BH,MAGDI,EAAa,EAAED,EAAIE,MACvBhB,QAAQiB,mBAAmBH,kBAAmBE,QAE1CE,EAAWJ,IACfd,QAAQmB,qCAAqCL,+BAE/CL,EAAgB,CAAEK,GAAI,GAAIM,OAAQ,MAC/BlB,KAAKa,GACLM,MAAMH,GACTT,EAAgB,CAAEK,GAAI,GAAIM,OAAQ,MAC/BlB,KAAKa,GACLM,MAAMH,GACTT,EAAgB,CAAEK,GAAI,GAAIM,OAAQ,KAC/BlB,KAAKa,GACLM,MAAMH,GACTT,EAAgB,CAAEK,GAAI,GAAIM,OAAQ,MAC/BlB,KAAKa,GACLM,MAAMH","file":"src.24580370.js","sourceRoot":"..\\src","sourcesContent":["import './sass/main.scss';\r\n\r\n\r\n//задача1\r\n/* const delay = ms => {\r\n  const time=ms\r\n  return new Promise((resolve,reject)=>{\r\n    setTimeout(()=>{\r\n      resolve(time)\r\n\r\n\r\n    },ms)\r\n\r\n  })\r\n} \r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms */\r\n \r\n  \r\n //задача2\r\n const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\n  const toggleUserState = (allUsers, userName) => {\r\n    return new Promise((resolve)=>{\r\n      const updatedUsers = allUsers.map(user =>\r\n        user.name === userName ? { ...user, active: !user.active } : user,\r\n      )\r\n      resolve(updatedUsers)\r\n\r\n    })\r\n  }\r\n     \r\n \r\n\r\n  const logger = updatedUsers => console.table(updatedUsers);\r\n\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n\r\n //задача 3\r\n const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n  return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        const canProcess = Math.random() > 0.3;\r\n          if (canProcess) {\r\n              resolve([transaction.id, delay]);\r\n          } else {\r\n              reject (transaction.id)\r\n        }\r\n    }, delay);\r\n  });\r\n};\r\nconst logSuccess = ([id, time]) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\n\r\n\r\n"]}