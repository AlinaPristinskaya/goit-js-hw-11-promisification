{"version":3,"sources":["index.js"],"names":[],"mappings":";;;AAAA,aAAA,QAAA","file":"src.79b9fbc3.js","sourceRoot":"../src","sourcesContent":["import './sass/main.scss';\n\n\n//задача1\n/* const delay = ms => {\n  const time=ms\n  return new Promise((resolve,reject)=>{\n    setTimeout(()=>{\n      resolve(time)\n\n\n    },ms)\n\n  })\n} \n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms */\n \n  \n //задача2\n /* const users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\n  const toggleUserState = (allUsers, userName) => {\n    return new Promise((resolve)=>{\n      const updatedUsers = allUsers.map(user =>\n        user.name === userName ? { ...user, active: !user.active } : user,\n      )\n      resolve(updatedUsers)\n\n    })\n  }\n     \n \n\n  const logger = updatedUsers => console.table(updatedUsers);\n\n\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger); */\n\n //задача 3\n /* const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n    const delay = randomIntegerFromInterval(200, 500);\n  return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        const canProcess = Math.random() > 0.3;\n          if (canProcess) {\n              resolve([transaction.id, delay]);\n          } else {\n              reject (transaction.id)\n        }\n    }, delay);\n  });\n};\nconst logSuccess = ([id, time]) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError); */\n\n\n\n"]}