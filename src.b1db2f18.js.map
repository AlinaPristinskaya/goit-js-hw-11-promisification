{"version":3,"sources":["index.js"],"names":[],"mappings":";;;AAAA,aAAA,QAAA","file":"src.b1db2f18.js","sourceRoot":"..\\src","sourcesContent":["import './sass/main.scss';\r\n\r\n\r\n//задача1\r\n/* const delay = ms => {\r\n  const time=ms\r\n  return new Promise((resolve,reject)=>{\r\n    setTimeout(()=>{\r\n      resolve(time)\r\n\r\n\r\n    },ms)\r\n\r\n  })\r\n} \r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms */\r\n \r\n  \r\n //задача2\r\n /* const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\n  const toggleUserState = (allUsers, userName) => {\r\n    return new Promise((resolve)=>{\r\n      const updatedUsers = allUsers.map(user =>\r\n        user.name === userName ? { ...user, active: !user.active } : user,\r\n      )\r\n      resolve(updatedUsers)\r\n\r\n    })\r\n  }\r\n     \r\n \r\n\r\n  const logger = updatedUsers => console.table(updatedUsers);\r\n\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger); */\r\n\r\n //задача 3\r\n /* const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n  return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        const canProcess = Math.random() > 0.3;\r\n          if (canProcess) {\r\n              resolve([transaction.id, delay]);\r\n          } else {\r\n              reject (transaction.id)\r\n        }\r\n    }, delay);\r\n  });\r\n};\r\nconst logSuccess = ([id, time]) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError); */\r\n\r\n\r\n\r\n"]}